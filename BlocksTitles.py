#!/bin/env python3
"""
:author: Aeldit <https://github.com/Aeldit/>
:summary: Prints in the console (Windows) or adds to the clipboard the given
text but as a 'blocks' title
"""
################################################################################
#                                   IMPORTS                                    #
################################################################################
import sys

################################################################################
#                               GLOBAL VARIABLES                               #
################################################################################
LETTERS = {
    'A': (
        " █████╗ ",
        "██╔══██╗",
        "███████║",
        "██╔══██║",
        "██║  ██║",
        "╚═╝  ╚═╝"
    ),
    'B': (
        "██████╗ ",
        "██╔══██╗",
        "██████╔╝",
        "██╔══██╗",
        "██████╔╝",
        "╚═════╝ "
    ),
    'C': (
        " ██████╗",
        "██╔════╝",
        "██║     ",
        "██║     ",
        "╚██████╗",
        " ╚═════╝"
    ),
    'D': (
        "██████╗ ",
        "██╔══██╗",
        "██║  ██║",
        "██║  ██║",
        "██████╔╝",
        "╚═════╝ "
    ),
    'E': (
        "███████╗",
        "██╔════╝",
        "███████╗",
        "██╔════╝",
        "███████╗",
        "╚══════╝"
    ),
    'F': (
        "███████╗",
        "██╔════╝",
        "███████╗",
        "██╔════╝",
        "██║     ",
        "╚═╝     "
    ),
    'G': (
        " ████████╗",
        "██╔══════╝",
        "██║ ████╗ ",
        "██║ ╚══██╗",
        "╚███████╔╝",
        " ╚══════╝ "
    ),
    'H': (
        "██╗  ██╗",
        "██║  ██║",
        "███████║",
        "██╔══██║",
        "██║  ██║",
        "╚═╝  ╚═╝"
    ),
    'I': (
        "██╗ ",
        "╚═╝ ",
        "██╗ ",
        "██║ ",
        "██║ ",
        "╚═╝ "
    ),
    'J': (
        "   ██╗",
        "   ██║",
        "   ██║",
        "   ██║",
        "████╔╝",
        "╚═══╝ "
    ),
    'K': (
        "██╗  ██╗",
        "██║ ██╔╝",
        "█████╔╝ ",
        "██╔═██╗ ",
        "██║ ╚██╗",
        "╚═╝  ╚═╝"
    ),
    'L': (
        "██╗     ",
        "██║     ",
        "██║     ",
        "██║     ",
        "███████╗",
        "╚══════╝"
    ),
    'M': (
        "██╗   ██╗",
        "████████║",
        "██╔██═██║",
        "██║   ██║",
        "██║   ██║",
        "╚═╝   ╚═╝"
    ),
    'N': (
        "██╗   ██╗",
        "████╗ ██║",
        "██╔██╗██║",
        "██║╚████║",
        "██║  ╚██║",
        "╚═╝   ╚═╝"
    ),
    'O': (
        " ██████╗ ",
        "██╔═══██╗",
        "██║   ██║",
        "██║   ██║",
        "╚██████╔╝",
        " ╚═════╝ "
    ),
    'P': (
        "██████╗ ",
        "██╔══██╗",
        "██████╔╝",
        "██╔═══╝ ",
        "██║     ",
        "╚═╝     "
    ),
    'Q': (
        " ██████╗  ",
        "██╔═══██╗ ",
        "██║   ██║ ",
        "██║  ███║ ",
        "╚████████╗",
        " ╚═══════╝"
    ),
    'R': (
        "██████╗ ",
        "██╔══██╗",
        "██████╔╝",
        "██╔══██╗",
        "██║  ██║",
        "╚═╝  ╚═╝"
    ),
    'S': (
        " ██████╗",
        "██╔════╝",
        "╚█████╗ ",
        " ╚═══██╗",
        "██████╔╝",
        "╚═════╝ "
    ),
    'T': (
        "████████╗",
        "╚══██╔══╝",
        "   ██║   ",
        "   ██║   ",
        "   ██║   ",
        "   ╚═╝   "
    ),
    'U': (
        "██╗   ██╗",
        "██║   ██║",
        "██║   ██║",
        "██║   ██║",
        "╚██████╔╝",
        " ╚═════╝ "
    ),
    'V': (
        "██╗     ██╗",
        "╚██╗   ██╔╝",
        " ╚██╗ ██╔╝ ",
        "  ╚████╔╝  ",
        "   ╚██╔╝   ",
        "    ╚═╝    "
    ),
    'W': (
        "██╗         ██╗",
        "╚██╗       ██╔╝",
        " ╚██╗ ██╗ ██╔╝ ",
        "  ╚████████╔╝  ",
        "   ╚██╔═██╔╝   ",
        "    ╚═╝ ╚═╝    "
    ),
    'X': (
        "██╗   ██╗",
        "╚██╗ ██╔╝",
        " ╚████╔╝ ",
        " ██╔═██╗ ",
        "██╔╝ ╚██╗",
        "╚═╝   ╚═╝"
    ),
    'Y': (
        "██╗   ██╗",
        "╚██╗ ██╔╝",
        " ╚████╔╝ ",
        "   ██╔╝  ",
        "   ██║   ",
        "   ╚═╝   "
    ),
    'Z': (
        "████████╗",
        "     ██╔╝",
        "   ██╔═╝ ",
        " ██╔═╝   ",
        "████████╗",
        "╚═══════╝"
    ),
    ' ': (
        "      ",
        "      ",
        "      ",
        "      ",
        "      ",
        "      "
    )
}


################################################################################
#                                  FUNCTIONS                                   #
################################################################################
def main(text: str) -> None:
    """
    Takes the given string and prints it in the console

    :param text: The text to transform into a blocks title
    :returns: None
    """
    # Appends all the letters found in the given string
    # (if the given letters are defined in the LETTERS array)
    keys = LETTERS.keys()
    letters = tuple(LETTERS[s] for s in text.upper() if s in keys)

    text_len = len(text)
    lines = tuple(
        # Makes all the values in the current list a single string
        "".join(
            # For each letter, add its part of index 'line_nb' to the list
            tuple(letters[s][line_nb] for s in range(text_len))
        ) for line_nb in range(6)
    )

    print(
        "\n".join(
            (lines[0], lines[1], lines[2], lines[3], lines[4], lines[5])
        )
    )
    return None


if __name__ == "__main__":
    if len(sys.argv) == 2:
        if sys.argv[1] == "-h":
            print(
                "Usage: %s [TEXT] ...\n\n"
                "Prints in the console the given text under the form of "
                "a block title\n\n"
                "Example:\n%s \"My title\"" % (sys.argv[0], sys.argv[0])
            )
        else:
            main(sys.argv[1])
    else:
        print(
            "Wrong number of arguments.\nTry '%s -h' for more "
            "information." %
            sys.argv[0]
        )
